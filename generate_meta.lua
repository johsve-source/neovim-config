require('luassert')
local namespaces = require('luassert.namespaces')
local reserved_words = {
  ['and'] = true,
  ['break'] = true,
  ['do'] = true,
  ['else'] = true,
  ['elseif'] = true,
  ['end'] = true,
  ['false'] = true,
  ['for'] = true,
  ['function'] = true,
  ['if'] = true,
  ['in'] = true,
  ['local'] = true,
  ['nil'] = true,
  ['not'] = true,
  ['or'] = true,
  ['repeat'] = true,
  ['return'] = true,
  ['then'] = true,
  ['true'] = true,
  ['until'] = true,
  ['while'] = true,
}

local content = {
  '---@meta',
  '---This file is autogenerated, DO NOT EDIT',
  'error("Cannot require a meta file")',
  '',
  '---@generic T:any',
  '---@alias LuassertFunction fun(value:T):T',
  '---@alias LuassertFunctionTwoArgs fun(expected:T, actual:T):T',
  '---@alias LuassertFunctionMultiArgs fun(...:T):T',
  '',
  '---@class Luassert',
}

local args_count_per_matcher = {
  matches = 2,
  equals = 2,
  same = 2,
  error_matches = 2,
  near = 3,
}

local get_type_by_args = function(assertion)
  local arg_count = args_count_per_matcher[assertion] or 1
  if arg_count == 1 then
    return 'LuassertFunction'
  end
  if arg_count == 2 then
    return 'LuassertFunctionTwoArgs'
  end
  return 'LuassertFunctionMultiArgs'
end

local fix_reserved_words = function(word)
  if reserved_words[word] then
    return table.concat({ word:sub(1, 1):upper(), word:sub(2) })
  end
  return word
end

local assertions = vim.tbl_keys(namespaces.assertion)
local matchers = vim.tbl_keys(namespaces.matcher)
local modifiers = vim.tbl_keys(namespaces.modifier)

for _, modifier in ipairs(modifiers) do
  for _, assertion in ipairs(assertions) do
    table.insert(content, ('---@field %s_%s %s'):format(modifier, assertion, get_type_by_args(assertion)))
  end
end

for _, assertion in ipairs(assertions) do
  table.insert(content, ('---@field %s %s'):format(fix_reserved_words(assertion), get_type_by_args(assertion)))
end

for _, modifier in ipairs(modifiers) do
  table.insert(content, ('---@field %s Luassert'):format(fix_reserved_words(modifier)))
end

print('matchers', vim.inspect(matchers))

vim.fn.writefile(content, '_meta_test.lua')
